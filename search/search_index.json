{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sportradar API","text":"<p>Lightweight wrapper for Sportradar API</p>"},{"location":"#set-up","title":"Set up","text":"<ol> <li>Register on Sportradar Developer</li> <li>Generate an API Key</li> </ol>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install sportradar-api\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>from sportradar_api import SoccerExtended\n\nsportradar = SoccerExtended(api_key='SPORTRADAR_API_KEY')\n</code></pre>"},{"location":"SoccerExtended/","title":"SoccerExtended","text":""},{"location":"SoccerExtended/#sportradar_api.soccer_extended.soccer_extended.SoccerExtended","title":"<code>SoccerExtended</code>  <code>dataclass</code>","text":"<p>         Bases: <code>SportradarAPI</code></p> <p>Wrapper to interact with Sportradar SoccerExtended API</p> Source code in <code>sportradar_api/soccer_extended/soccer_extended.py</code> <pre><code>@dataclass\nclass SoccerExtended(SportradarAPI):\n\"\"\"Wrapper to interact with Sportradar SoccerExtended API\"\"\"\n\n    api: str = \"soccer-extended\"\n\n    def get_competitions(self) -&gt; dict:\n\"\"\"Get all available Soccer competitions.\n\n        Returns:\n            API response\n        \"\"\"\n        return self._call_endpoint(endpoint=\"competitions\", key=\"competitions\")\n\n    def get_seasons(self) -&gt; dict:\n\"\"\"Get historical season information for all competitions.\n\n        Returns:\n            API response\n        \"\"\"\n        return self._call_endpoint(endpoint=\"seasons\", key=\"seasons\")\n\n    def get_season_summaries(self, season_urn: str) -&gt; dict:\n\"\"\"Get the summaries for all sport events in a season (any status). Provides information for all matches from a\n        given season including scoring and statistics at the match level.\n\n        Args:\n            season_urn:\n\n        Returns:\n            API response\n        \"\"\"\n        return self._call_endpoint(endpoint=f\"seasons/{season_urn}/summaries\", key=\"summaries\")\n\n    def get_season_competitors(self, season_urn: str) -&gt; dict:\n\"\"\"Get all teams participating for a given season.\n\n        Args:\n            season_urn: URN of a given season\n\n        Returns:\n            API response\n        \"\"\"\n        return self._call_endpoint(endpoint=f\"seasons/{season_urn}/competitors\", key=\"season_competitors\")\n\n    def get_season_competitor_players(self, season_urn: str) -&gt; dict:\n\"\"\"Get the competitors and their players in a season. Provides player roster information for every team from a\n         given season.\n\n        Args:\n            season_urn: URN of a given season\n\n        Returns:\n            API response\n        \"\"\"\n        return self._call_endpoint(endpoint=f\"seasons/{season_urn}/competitor_players\", key=\"season_competitor_players\")\n\n    def get_player_profile(self, player_urn: str) -&gt; dict:\n\"\"\"Get the player profile for the given urn. Provides player information, including current and historical team\n        membership info.\n\n        Args:\n            player_urn: URN of a given player\n\n        Returns:\n            API response\n        \"\"\"\n\n        return self._call_endpoint(endpoint=f\"players/{player_urn}/profile\")\n\n    def get_sport_event_summary(self, sport_event_urn: str) -&gt; dict:\n\"\"\"Get the summary of a given sport event urn, including results.\n\n        Args:\n            sport_event_urn: URN of a given sport event\n\n        Returns:\n            API response\n        \"\"\"\n        return self._call_endpoint(endpoint=f\"sport_events/{sport_event_urn}/summary\")\n</code></pre>"},{"location":"SoccerExtended/#sportradar_api.soccer_extended.soccer_extended.SoccerExtended.get_competitions","title":"<code>get_competitions()</code>","text":"<p>Get all available Soccer competitions.</p> <p>Returns:</p> Type Description <code>dict</code> <p>API response</p> Source code in <code>sportradar_api/soccer_extended/soccer_extended.py</code> <pre><code>def get_competitions(self) -&gt; dict:\n\"\"\"Get all available Soccer competitions.\n\n    Returns:\n        API response\n    \"\"\"\n    return self._call_endpoint(endpoint=\"competitions\", key=\"competitions\")\n</code></pre>"},{"location":"SoccerExtended/#sportradar_api.soccer_extended.soccer_extended.SoccerExtended.get_player_profile","title":"<code>get_player_profile(player_urn)</code>","text":"<p>Get the player profile for the given urn. Provides player information, including current and historical team membership info.</p> <p>Parameters:</p> Name Type Description Default <code>player_urn</code> <code>str</code> <p>URN of a given player</p> required <p>Returns:</p> Type Description <code>dict</code> <p>API response</p> Source code in <code>sportradar_api/soccer_extended/soccer_extended.py</code> <pre><code>def get_player_profile(self, player_urn: str) -&gt; dict:\n\"\"\"Get the player profile for the given urn. Provides player information, including current and historical team\n    membership info.\n\n    Args:\n        player_urn: URN of a given player\n\n    Returns:\n        API response\n    \"\"\"\n\n    return self._call_endpoint(endpoint=f\"players/{player_urn}/profile\")\n</code></pre>"},{"location":"SoccerExtended/#sportradar_api.soccer_extended.soccer_extended.SoccerExtended.get_season_competitor_players","title":"<code>get_season_competitor_players(season_urn)</code>","text":"<p>Get the competitors and their players in a season. Provides player roster information for every team from a  given season.</p> <p>Parameters:</p> Name Type Description Default <code>season_urn</code> <code>str</code> <p>URN of a given season</p> required <p>Returns:</p> Type Description <code>dict</code> <p>API response</p> Source code in <code>sportradar_api/soccer_extended/soccer_extended.py</code> <pre><code>def get_season_competitor_players(self, season_urn: str) -&gt; dict:\n\"\"\"Get the competitors and their players in a season. Provides player roster information for every team from a\n     given season.\n\n    Args:\n        season_urn: URN of a given season\n\n    Returns:\n        API response\n    \"\"\"\n    return self._call_endpoint(endpoint=f\"seasons/{season_urn}/competitor_players\", key=\"season_competitor_players\")\n</code></pre>"},{"location":"SoccerExtended/#sportradar_api.soccer_extended.soccer_extended.SoccerExtended.get_season_competitors","title":"<code>get_season_competitors(season_urn)</code>","text":"<p>Get all teams participating for a given season.</p> <p>Parameters:</p> Name Type Description Default <code>season_urn</code> <code>str</code> <p>URN of a given season</p> required <p>Returns:</p> Type Description <code>dict</code> <p>API response</p> Source code in <code>sportradar_api/soccer_extended/soccer_extended.py</code> <pre><code>def get_season_competitors(self, season_urn: str) -&gt; dict:\n\"\"\"Get all teams participating for a given season.\n\n    Args:\n        season_urn: URN of a given season\n\n    Returns:\n        API response\n    \"\"\"\n    return self._call_endpoint(endpoint=f\"seasons/{season_urn}/competitors\", key=\"season_competitors\")\n</code></pre>"},{"location":"SoccerExtended/#sportradar_api.soccer_extended.soccer_extended.SoccerExtended.get_season_summaries","title":"<code>get_season_summaries(season_urn)</code>","text":"<p>Get the summaries for all sport events in a season (any status). Provides information for all matches from a given season including scoring and statistics at the match level.</p> <p>Parameters:</p> Name Type Description Default <code>season_urn</code> <code>str</code> required <p>Returns:</p> Type Description <code>dict</code> <p>API response</p> Source code in <code>sportradar_api/soccer_extended/soccer_extended.py</code> <pre><code>def get_season_summaries(self, season_urn: str) -&gt; dict:\n\"\"\"Get the summaries for all sport events in a season (any status). Provides information for all matches from a\n    given season including scoring and statistics at the match level.\n\n    Args:\n        season_urn:\n\n    Returns:\n        API response\n    \"\"\"\n    return self._call_endpoint(endpoint=f\"seasons/{season_urn}/summaries\", key=\"summaries\")\n</code></pre>"},{"location":"SoccerExtended/#sportradar_api.soccer_extended.soccer_extended.SoccerExtended.get_seasons","title":"<code>get_seasons()</code>","text":"<p>Get historical season information for all competitions.</p> <p>Returns:</p> Type Description <code>dict</code> <p>API response</p> Source code in <code>sportradar_api/soccer_extended/soccer_extended.py</code> <pre><code>def get_seasons(self) -&gt; dict:\n\"\"\"Get historical season information for all competitions.\n\n    Returns:\n        API response\n    \"\"\"\n    return self._call_endpoint(endpoint=\"seasons\", key=\"seasons\")\n</code></pre>"},{"location":"SoccerExtended/#sportradar_api.soccer_extended.soccer_extended.SoccerExtended.get_sport_event_summary","title":"<code>get_sport_event_summary(sport_event_urn)</code>","text":"<p>Get the summary of a given sport event urn, including results.</p> <p>Parameters:</p> Name Type Description Default <code>sport_event_urn</code> <code>str</code> <p>URN of a given sport event</p> required <p>Returns:</p> Type Description <code>dict</code> <p>API response</p> Source code in <code>sportradar_api/soccer_extended/soccer_extended.py</code> <pre><code>def get_sport_event_summary(self, sport_event_urn: str) -&gt; dict:\n\"\"\"Get the summary of a given sport event urn, including results.\n\n    Args:\n        sport_event_urn: URN of a given sport event\n\n    Returns:\n        API response\n    \"\"\"\n    return self._call_endpoint(endpoint=f\"sport_events/{sport_event_urn}/summary\")\n</code></pre>"},{"location":"SoccerExtendedPandas/","title":"SoccerExtendedPandas","text":""},{"location":"SoccerExtendedPandas/#sportradar_api.soccer_extended.soccer_extended_pandas.SoccerExtendedPandas","title":"<code>SoccerExtendedPandas</code>  <code>dataclass</code>","text":"<p>         Bases: <code>SportradarAPI</code></p> <p>Parser to transform the SoccerExtended API response to Pandas DataFrame</p> Source code in <code>sportradar_api/soccer_extended/soccer_extended_pandas.py</code> <pre><code>@dataclass\nclass SoccerExtendedPandas(SportradarAPI):\n\"\"\"Parser to transform the SoccerExtended API response to Pandas DataFrame\"\"\"\n\n    api: str = \"soccer-extended\"\n\n    def __post_init__(self):\n        self.soccer_extended = SoccerExtended(api_key=self.api_key, verbose=self.verbose)\n\n    def get_competitions(self) -&gt; pd.DataFrame:\n\"\"\"Get all available Soccer competitions.\n\n        Returns:\n            Pandas DataFrame\n        \"\"\"\n        competitions = self.soccer_extended.get_competitions()\n        competitions = pd.json_normalize(competitions[\"competitions\"])\n\n        return competitions\n\n    def get_seasons(self) -&gt; pd.DataFrame:\n\"\"\"Get historical season information for all competitions.\n\n        Returns:\n            Pandas DataFrame\n        \"\"\"\n        seasons = self.soccer_extended.get_seasons()\n        seasons = pd.json_normalize(seasons[\"seasons\"])\n\n        return seasons\n\n    def get_season_matches(self, season_urn: str):\n\"\"\"Get the information of all matches from a given season.\n\n        Args:\n            season_urn: URN of a given season\n\n        Returns:\n            Pandas DataFrame\n        \"\"\"\n        cols = [\n            \"sport_event.id\",\n            \"sport_event.start_time\",\n            \"sport_event.start_time_confirmed\",\n            \"sport_event.sport_event_context.sport.id\",\n            \"sport_event.sport_event_context.category.id\",\n            \"sport_event.sport_event_context.competition.id\",\n            \"sport_event.sport_event_context.season.id\",\n            \"sport_event.coverage.sport_event_properties.lineups\",\n            \"sport_event.coverage.sport_event_properties.venue\",\n            \"sport_event.coverage.sport_event_properties.extended_player_stats\",\n            \"sport_event.coverage.sport_event_properties.extended_team_stats\",\n            \"sport_event.coverage.sport_event_properties.basic_play_by_play\",\n            \"sport_event.coverage.sport_event_properties.basic_player_stats\",\n            \"sport_event.coverage.sport_event_properties.basic_team_stats\",\n            \"sport_event.competitor_home_id\",\n            \"sport_event.competitor_away_id\",\n            \"sport_event.venue.id\",\n            \"sport_event.sport_event_conditions.ground.neutral\",\n            \"sport_event_status.status\",\n            \"sport_event_status.match_status\",\n            \"sport_event.replaced_by\",\n            \"sport_event_status.home_score\",\n            \"sport_event_status.away_score\",\n            \"sport_event_status.match_tie\",\n            \"sport_event_status.winner_id\",\n        ]\n        season_summaries = self.soccer_extended.get_season_summaries(season_urn=season_urn)\n        season_matches = pd.json_normalize(season_summaries[\"summaries\"])\n\n        competitors = pd.DataFrame(season_matches.pop(\"sport_event.competitors\").to_list())\n        competitors.columns = [\"sport_event.competitor_home_id\", \"sport_event.competitor_away_id\"]\n        competitors[\"sport_event.competitor_home_id\"] = competitors[\"sport_event.competitor_home_id\"].apply(\n            lambda x: x.get(\"id\")\n        )\n        competitors[\"sport_event.competitor_away_id\"] = competitors[\"sport_event.competitor_away_id\"].apply(\n            lambda x: x.get(\"id\")\n        )\n\n        cols_select = [col for col in cols if col in season_matches.columns]\n\n        season_matches = (\n            season_matches.join(competitors)\n            .loc[:, cols_select]\n            .pipe(\n                remove_cols_str,\n                [\n                    \"sport_event.\",\n                    \"sport_event_context.\",\n                    \"coverage.sport_event_properties.\",\n                    \"sport_event_conditions.\",\n                    \"sport_event_status.\",\n                ],\n            )\n            .pipe(replace_cols_str, {\".\": \"_\"})\n        )\n\n        return season_matches\n\n    def get_season_matches_statistics(self, season_urn: str) -&gt; pd.DataFrame:\n\"\"\"Get the players statistics of all matches from a given season.\n\n        Args:\n            season_urn: URN of a given season\n\n        Returns:\n            Pandas DataFrame\n        \"\"\"\n        season_summaries = self.soccer_extended.get_season_summaries(season_urn=season_urn)\n\n        matches_statistics = (\n            pd.json_normalize(season_summaries, \"summaries\")\n            .pipe(explode_column, \"statistics.totals.competitors\", [\"sport_event.id\", \"sport_event.start_time\"])\n            .pipe(\n                explode_column,\n                \"statistics.totals.competitors.players\",\n                [\n                    \"sport_event.id\",\n                    \"sport_event.start_time\",\n                    \"statistics.totals.competitors.id\",\n                    \"statistics.totals.competitors.qualifier\",\n                ],\n            )\n            .pipe(\n                lambda x: x.set_axis(\n                    [remove_str(\"_\".join(col.split(\".\")[-2:]), [\"sport_event_\", \"statistics_\"]) for col in x.columns],\n                    axis=1,\n                )\n            )\n        )\n\n        return matches_statistics\n\n    def get_season_competitors(self, season_urn: str) -&gt; pd.DataFrame:\n\"\"\"Get all teams participating for a given season.\n\n        Args:\n            season_urn: URN of a given season\n\n        Returns:\n            Pandas DataFrame\n        \"\"\"\n        season_competitors = self.soccer_extended.get_season_competitors(season_urn=season_urn)\n        season_competitors = pd.json_normalize(season_competitors[\"season_competitors\"])\n\n        return season_competitors.assign(season_urn=season_urn)\n\n    def get_season_competitor_player(self, season_urn: str) -&gt; pd.DataFrame:\n\"\"\"Get all players profile for a given season\n\n        Args:\n            season_urn: URN of a given season\n\n        Returns:\n            Pandas DataFrame\n        \"\"\"\n        season_competitor_players = self.soccer_extended.get_season_competitor_players(season_urn=season_urn)\n        season_competitor_players = (\n            pd.json_normalize(season_competitor_players[\"season_competitor_players\"])\n            .explode(\"players\")\n            .players.apply(pd.Series)\n        )\n\n        return season_competitor_players\n\n    def get_player_profile_info(self, player_urn: str) -&gt; pd.DataFrame:\n\"\"\"Get the basic information from a player profile\n\n        Args:\n            player_urn: URN of a given player\n\n        Returns:\n            Pandas DataFrame\n        \"\"\"\n        player_profile = self.soccer_extended.get_player_profile(player_urn=player_urn)\n        player_profile_info = pd.json_normalize(player_profile[\"player\"])\n\n        return player_profile_info\n\n    def get_player_profile_competitors(self, player_urn: str) -&gt; pd.DataFrame:\n\"\"\"Get the competitors from a player profile\n\n        Args:\n            player_urn: URN of a given player\n\n        Returns:\n            Pandas DataFrame\n        \"\"\"\n        player_profile = self.soccer_extended.get_player_profile(player_urn=player_urn)\n        player_profile_competitors = pd.json_normalize(player_profile[\"competitors\"])\n\n        return player_profile_competitors.assign(player_id=player_urn)\n\n    def get_player_profile_roles(self, player_urn: str) -&gt; pd.DataFrame:\n\"\"\"Get the roles from a player profile\n\n        Args:\n            player_urn: URN of a given player\n\n        Returns:\n            Pandas DataFrame\n        \"\"\"\n        player_profile = self.soccer_extended.get_player_profile(player_urn=player_urn)\n        player_profile_roles = pd.json_normalize([flatten(role, separator=\".\") for role in player_profile[\"roles\"]])\n\n        return player_profile_roles.assign(player_urn=player_urn)\n\n    def get_sport_event_statistics(self, sport_event_urn: str) -&gt; pd.DataFrame:\n\"\"\"Get the statistics from a sport event\n\n        Args:\n            sport_event_urn: URN of a given sport event\n\n        Returns:\n            Pandas DataFrame\n        \"\"\"\n        sport_event_summary = self.soccer_extended.get_sport_event_summary(sport_event_urn=sport_event_urn)\n\n        sport_event_statistics = (\n            pd.json_normalize(sport_event_summary)\n            .pipe(explode_column, \"statistics.totals.competitors\", [\"sport_event.id\", \"sport_event.start_time\"])\n            .pipe(\n                explode_column,\n                \"statistics.totals.competitors.players\",\n                [\n                    \"sport_event.id\",\n                    \"sport_event.start_time\",\n                    \"statistics.totals.competitors.id\",\n                    \"statistics.totals.competitors.qualifier\",\n                ],\n            )\n            .pipe(\n                lambda x: x.set_axis(\n                    [remove_str(\"_\".join(col.split(\".\")[-2:]), [\"sport_event_\", \"statistics_\"]) for col in x.columns],\n                    axis=1,\n                )\n            )\n        )\n\n        return sport_event_statistics\n</code></pre>"},{"location":"SoccerExtendedPandas/#sportradar_api.soccer_extended.soccer_extended_pandas.SoccerExtendedPandas.get_competitions","title":"<code>get_competitions()</code>","text":"<p>Get all available Soccer competitions.</p> <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Pandas DataFrame</p> Source code in <code>sportradar_api/soccer_extended/soccer_extended_pandas.py</code> <pre><code>def get_competitions(self) -&gt; pd.DataFrame:\n\"\"\"Get all available Soccer competitions.\n\n    Returns:\n        Pandas DataFrame\n    \"\"\"\n    competitions = self.soccer_extended.get_competitions()\n    competitions = pd.json_normalize(competitions[\"competitions\"])\n\n    return competitions\n</code></pre>"},{"location":"SoccerExtendedPandas/#sportradar_api.soccer_extended.soccer_extended_pandas.SoccerExtendedPandas.get_player_profile_competitors","title":"<code>get_player_profile_competitors(player_urn)</code>","text":"<p>Get the competitors from a player profile</p> <p>Parameters:</p> Name Type Description Default <code>player_urn</code> <code>str</code> <p>URN of a given player</p> required <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Pandas DataFrame</p> Source code in <code>sportradar_api/soccer_extended/soccer_extended_pandas.py</code> <pre><code>def get_player_profile_competitors(self, player_urn: str) -&gt; pd.DataFrame:\n\"\"\"Get the competitors from a player profile\n\n    Args:\n        player_urn: URN of a given player\n\n    Returns:\n        Pandas DataFrame\n    \"\"\"\n    player_profile = self.soccer_extended.get_player_profile(player_urn=player_urn)\n    player_profile_competitors = pd.json_normalize(player_profile[\"competitors\"])\n\n    return player_profile_competitors.assign(player_id=player_urn)\n</code></pre>"},{"location":"SoccerExtendedPandas/#sportradar_api.soccer_extended.soccer_extended_pandas.SoccerExtendedPandas.get_player_profile_info","title":"<code>get_player_profile_info(player_urn)</code>","text":"<p>Get the basic information from a player profile</p> <p>Parameters:</p> Name Type Description Default <code>player_urn</code> <code>str</code> <p>URN of a given player</p> required <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Pandas DataFrame</p> Source code in <code>sportradar_api/soccer_extended/soccer_extended_pandas.py</code> <pre><code>def get_player_profile_info(self, player_urn: str) -&gt; pd.DataFrame:\n\"\"\"Get the basic information from a player profile\n\n    Args:\n        player_urn: URN of a given player\n\n    Returns:\n        Pandas DataFrame\n    \"\"\"\n    player_profile = self.soccer_extended.get_player_profile(player_urn=player_urn)\n    player_profile_info = pd.json_normalize(player_profile[\"player\"])\n\n    return player_profile_info\n</code></pre>"},{"location":"SoccerExtendedPandas/#sportradar_api.soccer_extended.soccer_extended_pandas.SoccerExtendedPandas.get_player_profile_roles","title":"<code>get_player_profile_roles(player_urn)</code>","text":"<p>Get the roles from a player profile</p> <p>Parameters:</p> Name Type Description Default <code>player_urn</code> <code>str</code> <p>URN of a given player</p> required <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Pandas DataFrame</p> Source code in <code>sportradar_api/soccer_extended/soccer_extended_pandas.py</code> <pre><code>def get_player_profile_roles(self, player_urn: str) -&gt; pd.DataFrame:\n\"\"\"Get the roles from a player profile\n\n    Args:\n        player_urn: URN of a given player\n\n    Returns:\n        Pandas DataFrame\n    \"\"\"\n    player_profile = self.soccer_extended.get_player_profile(player_urn=player_urn)\n    player_profile_roles = pd.json_normalize([flatten(role, separator=\".\") for role in player_profile[\"roles\"]])\n\n    return player_profile_roles.assign(player_urn=player_urn)\n</code></pre>"},{"location":"SoccerExtendedPandas/#sportradar_api.soccer_extended.soccer_extended_pandas.SoccerExtendedPandas.get_season_competitor_player","title":"<code>get_season_competitor_player(season_urn)</code>","text":"<p>Get all players profile for a given season</p> <p>Parameters:</p> Name Type Description Default <code>season_urn</code> <code>str</code> <p>URN of a given season</p> required <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Pandas DataFrame</p> Source code in <code>sportradar_api/soccer_extended/soccer_extended_pandas.py</code> <pre><code>def get_season_competitor_player(self, season_urn: str) -&gt; pd.DataFrame:\n\"\"\"Get all players profile for a given season\n\n    Args:\n        season_urn: URN of a given season\n\n    Returns:\n        Pandas DataFrame\n    \"\"\"\n    season_competitor_players = self.soccer_extended.get_season_competitor_players(season_urn=season_urn)\n    season_competitor_players = (\n        pd.json_normalize(season_competitor_players[\"season_competitor_players\"])\n        .explode(\"players\")\n        .players.apply(pd.Series)\n    )\n\n    return season_competitor_players\n</code></pre>"},{"location":"SoccerExtendedPandas/#sportradar_api.soccer_extended.soccer_extended_pandas.SoccerExtendedPandas.get_season_competitors","title":"<code>get_season_competitors(season_urn)</code>","text":"<p>Get all teams participating for a given season.</p> <p>Parameters:</p> Name Type Description Default <code>season_urn</code> <code>str</code> <p>URN of a given season</p> required <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Pandas DataFrame</p> Source code in <code>sportradar_api/soccer_extended/soccer_extended_pandas.py</code> <pre><code>def get_season_competitors(self, season_urn: str) -&gt; pd.DataFrame:\n\"\"\"Get all teams participating for a given season.\n\n    Args:\n        season_urn: URN of a given season\n\n    Returns:\n        Pandas DataFrame\n    \"\"\"\n    season_competitors = self.soccer_extended.get_season_competitors(season_urn=season_urn)\n    season_competitors = pd.json_normalize(season_competitors[\"season_competitors\"])\n\n    return season_competitors.assign(season_urn=season_urn)\n</code></pre>"},{"location":"SoccerExtendedPandas/#sportradar_api.soccer_extended.soccer_extended_pandas.SoccerExtendedPandas.get_season_matches","title":"<code>get_season_matches(season_urn)</code>","text":"<p>Get the information of all matches from a given season.</p> <p>Parameters:</p> Name Type Description Default <code>season_urn</code> <code>str</code> <p>URN of a given season</p> required <p>Returns:</p> Type Description <p>Pandas DataFrame</p> Source code in <code>sportradar_api/soccer_extended/soccer_extended_pandas.py</code> <pre><code>def get_season_matches(self, season_urn: str):\n\"\"\"Get the information of all matches from a given season.\n\n    Args:\n        season_urn: URN of a given season\n\n    Returns:\n        Pandas DataFrame\n    \"\"\"\n    cols = [\n        \"sport_event.id\",\n        \"sport_event.start_time\",\n        \"sport_event.start_time_confirmed\",\n        \"sport_event.sport_event_context.sport.id\",\n        \"sport_event.sport_event_context.category.id\",\n        \"sport_event.sport_event_context.competition.id\",\n        \"sport_event.sport_event_context.season.id\",\n        \"sport_event.coverage.sport_event_properties.lineups\",\n        \"sport_event.coverage.sport_event_properties.venue\",\n        \"sport_event.coverage.sport_event_properties.extended_player_stats\",\n        \"sport_event.coverage.sport_event_properties.extended_team_stats\",\n        \"sport_event.coverage.sport_event_properties.basic_play_by_play\",\n        \"sport_event.coverage.sport_event_properties.basic_player_stats\",\n        \"sport_event.coverage.sport_event_properties.basic_team_stats\",\n        \"sport_event.competitor_home_id\",\n        \"sport_event.competitor_away_id\",\n        \"sport_event.venue.id\",\n        \"sport_event.sport_event_conditions.ground.neutral\",\n        \"sport_event_status.status\",\n        \"sport_event_status.match_status\",\n        \"sport_event.replaced_by\",\n        \"sport_event_status.home_score\",\n        \"sport_event_status.away_score\",\n        \"sport_event_status.match_tie\",\n        \"sport_event_status.winner_id\",\n    ]\n    season_summaries = self.soccer_extended.get_season_summaries(season_urn=season_urn)\n    season_matches = pd.json_normalize(season_summaries[\"summaries\"])\n\n    competitors = pd.DataFrame(season_matches.pop(\"sport_event.competitors\").to_list())\n    competitors.columns = [\"sport_event.competitor_home_id\", \"sport_event.competitor_away_id\"]\n    competitors[\"sport_event.competitor_home_id\"] = competitors[\"sport_event.competitor_home_id\"].apply(\n        lambda x: x.get(\"id\")\n    )\n    competitors[\"sport_event.competitor_away_id\"] = competitors[\"sport_event.competitor_away_id\"].apply(\n        lambda x: x.get(\"id\")\n    )\n\n    cols_select = [col for col in cols if col in season_matches.columns]\n\n    season_matches = (\n        season_matches.join(competitors)\n        .loc[:, cols_select]\n        .pipe(\n            remove_cols_str,\n            [\n                \"sport_event.\",\n                \"sport_event_context.\",\n                \"coverage.sport_event_properties.\",\n                \"sport_event_conditions.\",\n                \"sport_event_status.\",\n            ],\n        )\n        .pipe(replace_cols_str, {\".\": \"_\"})\n    )\n\n    return season_matches\n</code></pre>"},{"location":"SoccerExtendedPandas/#sportradar_api.soccer_extended.soccer_extended_pandas.SoccerExtendedPandas.get_season_matches_statistics","title":"<code>get_season_matches_statistics(season_urn)</code>","text":"<p>Get the players statistics of all matches from a given season.</p> <p>Parameters:</p> Name Type Description Default <code>season_urn</code> <code>str</code> <p>URN of a given season</p> required <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Pandas DataFrame</p> Source code in <code>sportradar_api/soccer_extended/soccer_extended_pandas.py</code> <pre><code>def get_season_matches_statistics(self, season_urn: str) -&gt; pd.DataFrame:\n\"\"\"Get the players statistics of all matches from a given season.\n\n    Args:\n        season_urn: URN of a given season\n\n    Returns:\n        Pandas DataFrame\n    \"\"\"\n    season_summaries = self.soccer_extended.get_season_summaries(season_urn=season_urn)\n\n    matches_statistics = (\n        pd.json_normalize(season_summaries, \"summaries\")\n        .pipe(explode_column, \"statistics.totals.competitors\", [\"sport_event.id\", \"sport_event.start_time\"])\n        .pipe(\n            explode_column,\n            \"statistics.totals.competitors.players\",\n            [\n                \"sport_event.id\",\n                \"sport_event.start_time\",\n                \"statistics.totals.competitors.id\",\n                \"statistics.totals.competitors.qualifier\",\n            ],\n        )\n        .pipe(\n            lambda x: x.set_axis(\n                [remove_str(\"_\".join(col.split(\".\")[-2:]), [\"sport_event_\", \"statistics_\"]) for col in x.columns],\n                axis=1,\n            )\n        )\n    )\n\n    return matches_statistics\n</code></pre>"},{"location":"SoccerExtendedPandas/#sportradar_api.soccer_extended.soccer_extended_pandas.SoccerExtendedPandas.get_seasons","title":"<code>get_seasons()</code>","text":"<p>Get historical season information for all competitions.</p> <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Pandas DataFrame</p> Source code in <code>sportradar_api/soccer_extended/soccer_extended_pandas.py</code> <pre><code>def get_seasons(self) -&gt; pd.DataFrame:\n\"\"\"Get historical season information for all competitions.\n\n    Returns:\n        Pandas DataFrame\n    \"\"\"\n    seasons = self.soccer_extended.get_seasons()\n    seasons = pd.json_normalize(seasons[\"seasons\"])\n\n    return seasons\n</code></pre>"},{"location":"SoccerExtendedPandas/#sportradar_api.soccer_extended.soccer_extended_pandas.SoccerExtendedPandas.get_sport_event_statistics","title":"<code>get_sport_event_statistics(sport_event_urn)</code>","text":"<p>Get the statistics from a sport event</p> <p>Parameters:</p> Name Type Description Default <code>sport_event_urn</code> <code>str</code> <p>URN of a given sport event</p> required <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Pandas DataFrame</p> Source code in <code>sportradar_api/soccer_extended/soccer_extended_pandas.py</code> <pre><code>def get_sport_event_statistics(self, sport_event_urn: str) -&gt; pd.DataFrame:\n\"\"\"Get the statistics from a sport event\n\n    Args:\n        sport_event_urn: URN of a given sport event\n\n    Returns:\n        Pandas DataFrame\n    \"\"\"\n    sport_event_summary = self.soccer_extended.get_sport_event_summary(sport_event_urn=sport_event_urn)\n\n    sport_event_statistics = (\n        pd.json_normalize(sport_event_summary)\n        .pipe(explode_column, \"statistics.totals.competitors\", [\"sport_event.id\", \"sport_event.start_time\"])\n        .pipe(\n            explode_column,\n            \"statistics.totals.competitors.players\",\n            [\n                \"sport_event.id\",\n                \"sport_event.start_time\",\n                \"statistics.totals.competitors.id\",\n                \"statistics.totals.competitors.qualifier\",\n            ],\n        )\n        .pipe(\n            lambda x: x.set_axis(\n                [remove_str(\"_\".join(col.split(\".\")[-2:]), [\"sport_event_\", \"statistics_\"]) for col in x.columns],\n                axis=1,\n            )\n        )\n    )\n\n    return sport_event_statistics\n</code></pre>"}]}